import { app, BrowserWindow } from 'electron';
import { XmlDocument } from '@nodert-win10-rs4/windows.data.xml.dom';
import { ToastNotification, ToastNotificationManager } from '@nodert-win10-rs4/windows.ui.notifications';
import electronIsDev from 'electron-is-dev';
import path from 'path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

const additionalData = { myKey: 'myValue' }
const gotTheLock = app.requestSingleInstanceLock(additionalData)

if (!gotTheLock) {
  console.log('Did not get the lock. Quitting.');
  app.quit()
} else {
  if (electronIsDev && process.platform === 'win32') {
    // Set the path of electron.exe and your app.
    // These two additional parameters are only available on windows.
    // Setting this is required to get this working in dev mode.enrepro
    app.setAsDefaultProtocolClient(
      'enrepro',
      process.execPath,
      [
        path.resolve(process.argv[1]),
      ],
    );
  } else {
    app.setAsDefaultProtocolClient('enrepro');
  }

  app.on('second-instance', (event, commandLine, workingDirectory, additionalData) => {
    // Someone tried to run a second instance, we should focus our window.
    console.log('Second instance launched');
    if (mainWindow) {
      if (mainWindow.isMinimized()) {
        mainWindow.restore();
      }

      mainWindow.focus();
    }
  });

  // This method will be called when Electron has finished
  // initialization and is ready to create browser windows.F
  // Some APIs can only be used after this event occurs.
  app.on('ready', () => {
    createWindow();

    const toastXmlString =
      '<toast launch="enrepro:action=test" activationType="protocol"><visual><binding template="ToastText01"><text id="1">Click to open the app</text></binding></visual></toast>';

    const xmlDocument = new XmlDocument();
    xmlDocument.loadXml(toastXmlString);

    const toast = new ToastNotification(xmlDocument);
    toast.on('activated', () => console.info('Toast activated!'));
    toast.on('dismissed', () => console.info('Toast dismissed'));

    toast.tag = 'abc123';
    toast.group = 'group1';

    const notifier = ToastNotificationManager.createToastNotifier('electron-protocol-notification');
    notifier.show(toast);
  });

  // Quit when all windows are closed, except on macOS. There, it's common
  // for applications and their menu bar to stay active until the user quits
  // explicitly with Cmd + Q.
  app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
      app.quit();
    }
  });

  app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
}
