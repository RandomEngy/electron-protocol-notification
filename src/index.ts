import { app, BrowserWindow } from 'electron';
import { XmlDocument } from '@nodert-win10-rs4/windows.data.xml.dom';
import { ToastNotification, ToastNotificationManager } from '@nodert-win10-rs4/windows.ui.notifications';
import { sendDummyKeystroke } from 'windows-dummy-keystroke';
import path from 'path';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// Workaround to let AllowSetForegroundWindow succeed.
// See https://www.npmjs.com/package/windows-dummy-keystroke for a full explanation of why this is needed.
sendDummyKeystroke();

const additionalData = { myKey: 'myValue' }
const gotTheLock = app.requestSingleInstanceLock(additionalData)

/**
 * Looks for a protocol argument on the command line and performs an action based on it.
 * @param argv The command line arguments.
 */
function performActionOnLaunch(argv: string[]) {
  const protcolUri = argv.find(argument => argument.startsWith('myapp:'));
  if (protcolUri) {
    console.log(`Handling protcol URI: ${protcolUri}`);
  }
}

if (!gotTheLock) {
  console.log('Did not get the lock. Quitting.');
  app.quit()
} else {
  if (process.defaultApp) {
    if (process.argv.length >= 2) {
      app.setAsDefaultProtocolClient('myapp', process.execPath, [path.resolve(process.argv[1])])
    }
  } else {
    app.setAsDefaultProtocolClient('myapp');
  }

  app.on('second-instance', (event, commandLine, workingDirectory, additionalData) => {
    // Someone tried to run a second instance, we should focus our window.
    console.log('Second instance launched.');

    performActionOnLaunch(commandLine);

    if (mainWindow) {
      if (mainWindow.isMinimized()) {
        mainWindow.restore();
      }

      mainWindow.focus();
    }
  });

  // This method will be called when Electron has finished
  // initialization and is ready to create browser windows.F
  // Some APIs can only be used after this event occurs.
  app.on('ready', () => {
    createWindow();

    performActionOnLaunch(process.argv);

    const toastXmlString =
      `<toast launch="myapp:navigate?key=value" activationType="protocol">
        <visual>
          <binding template="ToastText01">
            <text id="1">Click to open the app</text>
          </binding>
        </visual>
        <actions>
          <action content="Action 1" activationType="protocol" arguments="myapp:action1" />
          <action content="Action 2" activationType="protocol" arguments="myapp:action2" />
        </actions>
      </toast>`;

    const xmlDocument = new XmlDocument();
    xmlDocument.loadXml(toastXmlString);

    const toast = new ToastNotification(xmlDocument);
    toast.on('activated', () => console.info('Toast activated'));
    toast.on('dismissed', () => console.info('Toast dismissed'));

    toast.tag = 'abc123';

    const notifier = ToastNotificationManager.createToastNotifier('electron-protocol-notification');
    notifier.show(toast);
  });

  // Quit when all windows are closed, except on macOS. There, it's common
  // for applications and their menu bar to stay active until the user quits
  // explicitly with Cmd + Q.
  app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
      app.quit();
    }
  });

  app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
}
